int minSdk = hasProperty('devMinSdk') ? devMinSdk.toInteger() : rootProject.ext.minSdkVersion
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "bash", "-c", "git rev-list HEAD | wc -l"
            standardOutput = stdout
        }
        def result = Integer.parseInt(stdout.toString().trim())
        return result
    }
    catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "bash", "-c", "git for-each-ref --sort=taggerdate --format '%(tag)' refs/tags | tail -n 1"
            standardOutput = stdout
        }
        def versionName = stdout.toString().trim();
        if (versionName.empty) {
            throw new Exception("Empty version name")
        }
        return stdout.toString().trim();
    }
    catch (ignored) {
        return "0.0.1"
    }
}

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "ru.mydispatcher"
        minSdkVersion minSdk
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName getVersionName()
        versionCode getVersionCode()
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            File releaseSignFile = rootProject.file('release_keystore.properties')
            Properties releaseSignProperties
            if (releaseSignFile.exists()) {
                releaseSignProperties = new Properties()
                releaseSignProperties.load(new FileInputStream(releaseSignFile))
            }
            storeFile file('keystore/' + releaseSignProperties['keystore'])
            storePassword releaseSignProperties['storePassword']
            keyAlias releaseSignProperties['keyAlias']
            keyPassword releaseSignProperties['keyPassword']
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
            debuggable true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.anko:anko-commons:${anko_version}"

    // Local
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Google
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support.constraint:constraint-layout:${constraintLayoutVersion}"
    compile "com.android.support:multidex:${multiDexVersion}"
    compile "com.android.support:cardview-v7:${cardViewVersion}"

    // Dagger
    compile "com.google.dagger:dagger:${daggerVersion}"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Rx
    compile "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    compile 'io.reactivex.rxjava2:rxjava:2.1.2'

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

    // Glide
    compile "com.github.bumptech.glide:glide:${glideVersion}"

    // JodaTime
    compile "net.danlew:android.joda:${jodaTimeVersion}"

    // Chuck
    debugCompile "com.readystatesoftware.chuck:library:${chuckVersion}"
    releaseCompile "com.readystatesoftware.chuck:library-no-op:${chuckVersion}"

    //RxPermissions
    compile "com.tbruyelle.rxpermissions2:rxpermissions:${rxPermissionsVersion}"

    //Timber
    compile "com.jakewharton.timber:timber:${timberVersion}"

    //RxBindings
    compile "com.jakewharton.rxbinding2:rxbinding-kotlin:${rxBindingsVersion}"
    compile "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:${rxBindingsVersion}"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:${rxBindingsVersion}"

    //Pick photo
    compile "com.kbeanie:multipicker:${multipickerVersion}"
    compile "com.steelkiwi:cropiwa:${cropiwaVersion}"
}
